name: Generate TOP500 Direct List (Combined)

on:
  schedule:
    # Run daily at 6:00 AM Hong Kong/Taiwan Time (UTC+8 -> 22:00 UTC previous day)
    - cron: '0 22 * * *'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write # Allow writing repository content

jobs:
  generate_list_job: # Renamed job slightly
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Updated: Define markers/patterns for both sections
      - name: Set file paths and markers
        id: paths
        run: |
          echo "input_file=TMP_Source/TOP500_WHITE_AD.conf" >> $GITHUB_OUTPUT
          echo "output_file=TMP_Source/TOP500_Direct.list" >> $GITHUB_OUTPUT
          # Section 1 markers
          echo "start1=# 手工定义的 Direct 列表" >> $GITHUB_OUTPUT
          echo "end1=# 手工定义的 Proxy 列表" >> $GITHUB_OUTPUT
          # Section 2 markers/patterns
          echo "start2_pattern=# top500 direct list update time:" >> $GITHUB_OUTPUT
          echo "end2_pattern=RULE-SET" >> $GITHUB_OUTPUT

      # Updated: awk script now handles two sections
      - name: Extract and transform list (Combined Sections)
        id: generate
        run: |
          input_file="${{ steps.paths.outputs.input_file }}"
          output_file="${{ steps.paths.outputs.output_file }}"
          # Section 1 markers
          start1="${{ steps.paths.outputs.start1 }}"
          end1="${{ steps.paths.outputs.end1 }}"
          # Section 2 markers/patterns
          start2_pattern="${{ steps.paths.outputs.start2_pattern }}"
          end2_pattern="${{ steps.paths.outputs.end2_pattern }}"

          echo "Processing $input_file for $output_file (Combined Sections)..."
          if [ ! -f "$input_file" ]; then
            echo "Error: Input file $input_file not found!"
            exit 1
          fi

          # awk script for combining two sections:
          # Uses flags p1 and p2. Checks end markers first, then processes active sections, then checks start markers.
          awk -v s1="$start1" -v e1="$end1" -v s2p="$start2_pattern" -v e2p="$end2_pattern" '
            # --- Check End Markers First ---
            # Turn off p1 if end1 is matched exactly
            $0 == e1 { p1 = 0 }
            # Turn off p2 if line starts with end2 pattern
            index($0, e2p) == 1 { p2 = 0 }

            # --- Process if Flags Active (before potentially starting a new section) ---
            # Process Section 1 line (only if p1 is active)
            p1 {
              sub(/,[^,]*$/, ""); # Apply transformation
              print
              next # Done with this line, skip other checks
            }
            # Process Section 2 line (only if p2 is active)
            p2 {
              sub(/,[^,]*$/, ""); # Apply transformation
              print
              next # Done with this line, skip other checks
            }

            # --- Check Start Markers Last ---
            # Start Section 1 (only if not already processing a section)
            $0 == s1 { print; p1 = 1; next } # Print start line verbatim, set flag, skip
            # Start Section 2 (only if not already processing a section)
            index($0, s2p) == 1 { print; p2 = 1; next } # Print start line verbatim, set flag, skip

            # Lines not matching any start/end or active section flags are ignored
          ' "$input_file" > "$output_file"

          # Check if the output file was created by awk.
          if [ -f "$output_file" ]; then
            echo "Successfully generated $output_file with combined sections"
            echo "changes_made=true" >> $GITHUB_OUTPUT # Ensure commit step runs
          else
            echo "Error: awk command failed to create $output_file."
            # echo "changes_made=false" >> $GITHUB_OUTPUT # Not needed if exiting
            exit 1 # Fail the job if the file wasn't created
          fi

      - name: Configure Git
        # Run if generate step succeeded (didn't exit)
        run: |
          git config --global user.name 'Pandit'
          git config --global user.email 'pandit@panditpan.tk'

      - name: Commit and push changes
        # Run if generate step succeeded (didn't exit)
        run: |
          output_file="${{ steps.paths.outputs.output_file }}" # Still only one output file

          echo "Staging $output_file for commit..."
          git add "$output_file"

          echo "Committing update for $output_file..."
          # Commit will happen even if content is unchanged
          git commit -m "Automated update: Generate $output_file (Combined)" # Updated commit message slightly

          echo "Pushing commit..."
          git push https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}

        env:
           REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
