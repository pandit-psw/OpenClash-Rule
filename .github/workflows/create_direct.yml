name: Generate TOP500 Direct List

on:
  # Schedule to run every day at 6:00 AM Hong Kong Time (UTC+8)
  # GitHub Actions schedules use UTC. 6 AM HKT is 10 PM UTC the previous day.
  schedule:
    - cron: '0 22 * * *' # 22:00 UTC is 6:00 HKT

  # Allow manual triggering from the Actions tab
  workflow_dispatch:

# Set permissions for the workflow to be able to push changes
permissions:
  contents: write # Required to push changes back to the repository

jobs:
  generate_list:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use the standard checkout action

      - name: Set file paths
        id: paths
        run: |
          echo "input_file=TMP_Source/TOP500_WHITE_AD.conf" >> $GITHUB_OUTPUT
          echo "output_file=TMP_Source/TOP500_Direct.list" >> $GITHUB_OUTPUT
          # Corrected: Removed the single quotes inside the double quotes
          echo "start_marker=# 手工定义的 Direct 列表" >> $GITHUB_OUTPUT
          echo "end_marker=# 手工定义的 Proxy 列表" >> $GITHUB_OUTPUT
          
      - name: Extract and transform list
        id: generate
        run: |
          input_file="${{ steps.paths.outputs.input_file }}"
          output_file="${{ steps.paths.outputs.output_file }}"
          start_marker="${{ steps.paths.outputs.start_marker }}"
          end_marker="${{ steps.paths.outputs.end_marker }}"

          echo "Processing $input_file..."
          if [ ! -f "$input_file" ]; then
            echo "Error: Input file $input_file not found!"
            exit 1
          fi

          # Use awk to extract lines between markers, then sed to reformat
          # awk: Set flag 'p' when start_marker is found, unset when end_marker is found. Print if 'p' is true. Skip the marker lines themselves.
          # sed: Remove the last comma and everything after it (e.g., ',Reject')
          awk -v start="$start_marker" -v end="$end_marker" '
            $0 == end { p=0 }
            p && $0 != start { print }
            $0 == start { p=1 }
          ' "$input_file" | sed 's/,[^,]*$//' > "$output_file"

          # Check if the output file was created and is not empty
          if [ -s "$output_file" ]; then
            echo "Successfully generated $output_file"
            echo "changes_made=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: No lines extracted or output file is empty."
            echo "changes_made=false" >> $GITHUB_OUTPUT
            # Optionally remove the empty file if created
            # rm -f "$output_file"
          fi

      - name: Configure Git
        # Only run if changes were potentially made
        if: steps.generate.outputs.changes_made == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Commit and push changes
        # Only run if changes were potentially made
        if: steps.generate.outputs.changes_made == 'true'
        run: |
          output_file="${{ steps.paths.outputs.output_file }}"

          # Check if there are actual changes to commit
          if git diff --quiet "$output_file"; then
            echo "No changes detected in $output_file. Nothing to commit."
            exit 0
          fi

          echo "Committing changes to $output_file..."
          git add "$output_file"
          # Use GITHUB_OUTPUT or similar if you want to pass the file path dynamically
          git commit -m "Automated update: Generate $output_file"

          # Push changes using the provided PAT
          # The PAT needs 'repo' scope (or 'contents: write')
          git push https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}

        env:
           REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }} # Make the secret available as an env var
