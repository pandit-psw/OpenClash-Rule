name: Generate TOP500 AD List

on:
  # Schedule to run every day at 6:00 AM Hong Kong Time (UTC+8)
  # GitHub Actions schedules use UTC. 6 AM HKT is 10 PM UTC the previous day.
  schedule:
    - cron: '0 22 * * *' # 22:00 UTC is 6:00 HKT

  # Allow manual triggering from the Actions tab
  workflow_dispatch:

# Set permissions for the workflow to be able to push changes
permissions:
  contents: write # Required to push changes back to the repository

jobs:
  generate_list:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use the standard checkout action

      - name: Set file paths
        id: paths
        run: |
          echo "input_file=TMP_Source/TOP500_WHITE_AD.conf" >> $GITHUB_OUTPUT
          echo "output_file=TMP_Source/TOP500_AD.list" >> $GITHUB_OUTPUT
          # Corrected: Removed the single quotes inside the double quotes
          echo "start_marker_prefix=# adblock rules refresh time:" >> $GITHUB_OUTPUT
          echo "end_marker_prefix=# 手工定义的 Proxy 列表" >> $GITHUB_OUTPUT
          
      - name: Extract and transform list
        id: generate
        run: |
          input_file="${{ steps.paths.outputs.input_file }}"
          output_file="${{ steps.paths.outputs.output_file }}"
          # Correctly get the marker PREFIXES defined in the 'paths' step
          start_marker_prefix="${{ steps.paths.outputs.start_marker_prefix }}"
          end_marker_prefix="${{ steps.paths.outputs.end_marker_prefix }}"

          echo "Processing $input_file..."
          echo "Using start marker prefix: '${start_marker_prefix}'" # Added logging
          echo "Using end marker prefix: '${end_marker_prefix}'"     # Added logging
          if [ ! -f "$input_file" ]; then
            echo "Error: Input file $input_file not found!"
            exit 1
          fi

          # Use the CORRECT awk logic for matching PREFIXES
          # Pass the prefixes to awk using -v
          # Use regex matching (~) anchored to the start of the line (^)
          awk -v start="^${start_marker_prefix}" -v end="^${end_marker_prefix}" '
            $0 ~ end { p=0; next }    # If line starts with end marker prefix, stop printing, skip line
            $0 ~ start { p=1; next }  # If line starts with start marker prefix, start printing *from next line*, skip line
            p { print }               # If flag p is set, print the line
          ' "$input_file" | sed 's/,[^,]*$//' > "$output_file"

          # Check if the output file was created and is not empty
          if [ -s "$output_file" ]; then
            echo "Successfully generated $output_file"
            echo "changes_made=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: No lines extracted or output file is empty. Check markers in $input_file."
            echo "Start marker prefix expected: '${start_marker_prefix}'"
            echo "End marker prefix expected: '${end_marker_prefix}'"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        # Only run if changes were potentially made
        if: steps.generate.outputs.changes_made == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Commit and push changes
        # Only run if the generation step potentially produced a file
        # (We keep this outer 'if' because if awk failed entirely or produced nothing,
        # 'changes_made' would be false, and we wouldn't run this step)
        if: steps.generate.outputs.changes_made == 'true'
        run: |
          output_file="${{ steps.paths.outputs.output_file }}"

          echo "Staging $output_file for commit..."
          git add "$output_file" # Stage the file regardless of changes

          echo "Committing changes/update for $output_file..."
          # This commit message will appear even if the file content is the same
          git commit -m "Automated update: Generate $output_file"

          # Push changes using the provided PAT
          echo "Pushing commit..."
          # The push command requires the correct token scope (contents: write)
          git push https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}

        env:
           REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }} # Make the secret available
